import numpy as np
import matplotlib.pyplot as plt
from numpy.random import Generator,MT19937, PCG64
#import time.perfcounter as tpc
xarr=np.array([])

yarr=np.array([])

rarr=np.array([])
r=0
i=0
n=10
#Generating arrays of random numbers by 2 different generators
while r <= 10000:
    xgen=Generator(MT19937())
    ygen=Generator(PCG64())
    x=xgen.random()
    y=ygen.random()
    xarr=np.append(xarr,x)
    yarr=np.append(yarr,y)
    rarr=np.append(rarr,r)
    
    r+=1

#Offsetting the Mercene Twister Values by 10 places
XarrOffset=np.empty(len(xarr))
while i<= len(XarrOffset)-1:
    if i<len(XarrOffset)-n:
        XarrOffset[i]=xarr[i+n]
    if i>len(XarrOffset)-1-n:
        XarrOffset[i]=xarr[0+(len(XarrOffset)-i-1)]
    i+=1
    


#Calculating autocorrelation of the generated random number arrays
corrMT=np.correlate(xarr,xarr,'same')

corrPCG=np.correlate(yarr,yarr,'same')
print(corrMT)
#Plotting functions
plt.plot(corrMT,'x')
plt.title("Autocorrelation Analysis of the Mercene Twister Generator")
plt.ylabel("Autocorrelation")
plt.xlabel("# of Random Numbers generated by Mersene Twister")
plt.show()
plt.plot(corrPCG,'.')
plt.title("Autocorrelation Analysis of the Permuted Congruential Generator")
plt.ylabel("Autocorrelation")
plt.xlabel("# of Random Numbers generated by Permuted Congruential Generator")
plt.show()
plt.title("Uniformity Test MT19937")
plt.plot(xarr,'.')
plt.ylabel("MT19937 Generated Numbers", fontsize="small")
plt.xlabel("# of Random Numbers generated by MT19937", fontsize="small")
plt.show()
plt.title("Uniformity Test PCG64")
plt.plot(yarr,'.')
plt.ylabel("PCG64 Generated Numbers", fontsize="small")
plt.xlabel("# of Random Numbers generated by PCG64", fontsize="small")
plt.show()

